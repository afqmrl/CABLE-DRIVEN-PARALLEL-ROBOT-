#!/usr/bin/env python
import sys
import subprocess
import json
import os
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
    QDoubleSpinBox, QFormLayout, QTableWidget, QLabel,
    QComboBox, QMessageBox
)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# -----------------------------
# Live Plot Canvas (Matplotlib)
# -----------------------------
class LivePlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=8, height=6, dpi=100, motor_ids=None):
        self.fig, self.ax = plt.subplots(figsize=(width, height), dpi=dpi)
        super(LivePlotCanvas, self).__init__(self.fig)
        self.setParent(parent)
        self.motor_ids = motor_ids if motor_ids is not None else []
        self.history = {m: [] for m in self.motor_ids}  # <<< NEW: Store history per motor
        self.max_length = 1000  # <<< Keep last 100 samples
        self.initialize_plot()

    def initialize_plot(self):
        self.ax.set_title("PID Output Data")
        self.ax.set_xlabel("Sample Number")
        self.ax.set_ylabel("Output")
        self.ax.grid(True)
        self.lines = {}
        for m in self.motor_ids:
            line, = self.ax.plot([], [], label=f"Motor {m}")
            self.lines[m] = line
        self.ax.legend()
        self.fig.tight_layout()

    def update_plot(self, data):
        for m in self.motor_ids:
            m_str = str(m)
            if m_str in data.get("pid_outputs", {}):
                new_data = data["pid_outputs"][m_str]
                if not isinstance(new_data, list):
                    new_data = [new_data]
                # Only take the LAST value to simulate real-time
                if new_data:
                    self.history[m].append(new_data[-1])  # take latest value
                    if len(self.history[m]) > self.max_length:
                        self.history[m].pop(0)

                xdata = list(range(len(self.history[m])))
                ydata = self.history[m]
                self.lines[m].set_data(xdata, ydata)

        self.ax.relim()
        self.ax.autoscale_view()
        self.draw()

class ForcePlotCanvas(LivePlotCanvas):
    def initialize_plot(self):
        self.ax.set_title("Force Data Plot")
        self.ax.set_xlabel("Sample Number")
        self.ax.set_ylabel("Force Value")
        self.ax.grid(True)
        
        # REAL JSON keys (from force_data.json)
        self.data_keys = [
            "Board_3_Channel_A",  # Motor_3
            "Board_1_Channel_A",  # Motor_1
            "Board_4_Channel_A",  # Motor_4
            "Board_2_Channel_A",  # Motor_2
            "Board_6_Channel_A",  # Motor_7
            "Board_5_Channel_A",  # Motor_6
            "Board_5_Channel_B",  # Motor_5
            "Board_6_Channel_B"   # Motor_8
        ]

        # PRETTY names for plotting
        self.channels = [
            "Motor_1", "Motor_2", "Motor_3",
            "Motor_4", "Motor_5", "Motor_6",
            "Motor_7", "Motor_8"
        ]

        self.history = {ch: [] for ch in self.channels}
        self.max_length = 1000
        self.lines = {}
        
        for ch in self.channels:
            line, = self.ax.plot([], [], label=ch)
            self.lines[ch] = line
        
        self.ax.legend()
        self.fig.tight_layout()

    def update_plot(self, data):
        for pretty_name, real_key in zip(self.channels, self.data_keys):
            if real_key in data:
                new_data = data[real_key]
                if not isinstance(new_data, list):
                    new_data = [new_data]
                if new_data:
                    self.history[pretty_name].append(new_data[-1])
                    if len(self.history[pretty_name]) > self.max_length:
                        self.history[pretty_name].pop(0)

                xdata = list(range(len(self.history[pretty_name])))
                ydata = self.history[pretty_name]
                self.lines[pretty_name].set_data(xdata, ydata)

        self.ax.relim()
        self.ax.autoscale_view()
        self.draw()




# -----------------------------
# Control Page: Start/Stop, status and motor speeds
# -----------------------------
class ControlPage(QWidget):
    def __init__(self, parent=None):
        super(ControlPage, self).__init__(parent)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        self.start_btn = QPushButton("Start")
        self.stop_btn = QPushButton("Stop")
        self.stop_btn.setStyleSheet("background-color: red; color: white; font-weight: bold;")
        self.stop_btn.setEnabled(False)
        layout.addWidget(self.start_btn)
        layout.addWidget(self.stop_btn)
        self.qol_btn = QPushButton("QOL Init")
        self.qol_btn.setStyleSheet("background-color: #4CAF50; color: white; font-weight: bold;")
        layout.addWidget(self.qol_btn)

        self.status_label = QLabel("Status: Stopped")
        layout.addWidget(self.status_label)
        self.speed_label = QLabel("Motor Speeds: N/A")
        layout.addWidget(self.speed_label)
        self.reset_btn = QPushButton("Reset to (0, 0, 0.3)")
        self.reset_btn.setStyleSheet("background-color: orange; font-weight: bold;")
        self.reset_btn.setVisible(False)  # Hidden by default
        layout.addWidget(self.reset_btn)

# -----------------------------
# Plot Page: Displays the live PID plot
# -----------------------------
class PlotPage(QWidget):
    def __init__(self, motor_ids, parent=None):
        super(PlotPage, self).__init__(parent)
        self.motor_ids = motor_ids
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        # --- Top: PID Live Plot ---
        self.live_plot = LivePlotCanvas(self, width=8, height=4, dpi=100, motor_ids=self.motor_ids)
        layout.addWidget(self.live_plot)

        # --- Bottom: Force Plot ---
        self.force_plot = ForcePlotCanvas(self, width=8, height=4, dpi=100)
        layout.addWidget(self.force_plot)

        self.setLayout(layout)

    def update_plots(self):
        try:
            if os.path.exists("pid_data.json"):
                with open("pid_data.json", "r") as f:
                    pid_data = json.load(f)
                self.live_plot.update_plot(pid_data)

            if os.path.exists("force_data.json"):
                with open("force_data.json", "r") as f:
                    force_data = json.load(f)
                self.force_plot.update_plot(force_data)

        except Exception as e:
            print("Error updating plots:", e)


# -----------------------------
# Manual Command Page: Input desired (x, y, z) position
# -----------------------------
class ManualCommandPage(QWidget):
    def __init__(self, parent=None):
        super(ManualCommandPage, self).__init__(parent)
        self.setup_ui()
        self.saved_dir = "saved_commands"
        os.makedirs(self.saved_dir, exist_ok=True)
        self.load_saved_commands()

    def setup_ui(self):
        main_layout = QHBoxLayout(self)

        # Left layout
        left_layout = QVBoxLayout()

        form_layout = QFormLayout()
        self.x_input = QDoubleSpinBox()
        self.x_input.setRange(-1.0, 1.0)
        self.x_input.setDecimals(3)
        self.x_input.setValue(0.0)
        form_layout.addRow("X (m):", self.x_input)

        self.y_input = QDoubleSpinBox()
        self.y_input.setRange(-1.0, 1.0)
        self.y_input.setDecimals(3)
        self.y_input.setValue(0.0)
        form_layout.addRow("Y (m):", self.y_input)

        self.z_input = QDoubleSpinBox()
        self.z_input.setRange(0.0, 1.0)
        self.z_input.setDecimals(3)
        self.z_input.setValue(0.3)
        form_layout.addRow("Z (m):", self.z_input)

        left_layout.addLayout(form_layout)

        self.position_table = QTableWidget()
        self.position_table.setColumnCount(3)
        self.position_table.setHorizontalHeaderLabels(["X", "Y", "Z"])
        left_layout.addWidget(self.position_table)
        self.position_table.itemChanged.connect(self.update_3d_plot)

        # Save/Load section
        self.combo_saved = QComboBox()
        self.load_btn = QPushButton("Load Selected")
        self.save_as_btn = QPushButton("Save As New")

        left_layout.addWidget(QLabel("Saved Commands:"))
        left_layout.addWidget(self.combo_saved)
        left_layout.addWidget(self.load_btn)
        left_layout.addWidget(self.save_as_btn)

        # Buttons for positions
        self.add_btn = QPushButton("Add Position")
        self.remove_btn = QPushButton("Remove Selected")
        self.save_btn = QPushButton("Save to Robot")

        left_layout.addWidget(self.add_btn)
        left_layout.addWidget(self.remove_btn)
        left_layout.addWidget(self.save_btn)

        # Right layout (3D plot)
        right_layout = QVBoxLayout()
        self.fig = plt.figure()
        self.ax = self.fig.add_subplot(111, projection='3d')
        self.canvas = FigureCanvas(self.fig)
        right_layout.addWidget(self.canvas)

        main_layout.addLayout(left_layout, 1)
        main_layout.addLayout(right_layout, 2)

        # Signals
        self.add_btn.clicked.connect(self.add_position)
        self.remove_btn.clicked.connect(self.remove_selected)
        self.save_btn.clicked.connect(self.save_positions)
        self.load_btn.clicked.connect(self.load_selected_command)
        self.save_as_btn.clicked.connect(self.save_as_new_command)

        self.positions = []
        self.update_3d_plot()

    def add_position(self):
        x = self.x_input.value()
        y = self.y_input.value()
        z = self.z_input.value()
        self.positions.append({"x": x, "y": y, "z": z})
        self.update_table()
        self.update_3d_plot()

    def remove_selected(self):
        selected = self.position_table.currentRow()
        if selected >= 0:
            self.positions.pop(selected)
            self.update_table()
            self.update_3d_plot()

    def save_positions(self):
        if not self.positions:
            QMessageBox.warning(self, "No Positions", "Add at least one position before saving.")
            return
        try:
            with open("desired_positions.json", "w") as f:
                json.dump(self.positions, f)
            QMessageBox.information(self, "Saved", "Commands saved to robot (desired_positions.json).")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to save positions:\n{e}")

    def update_table(self):
        self.position_table.setRowCount(len(self.positions))
        for i, pos in enumerate(self.positions):
            self.position_table.setItem(i, 0, QtWidgets.QTableWidgetItem(f"{pos['x']:.3f}"))
            self.position_table.setItem(i, 1, QtWidgets.QTableWidgetItem(f"{pos['y']:.3f}"))
            self.position_table.setItem(i, 2, QtWidgets.QTableWidgetItem(f"{pos['z']:.3f}"))

    def update_3d_plot(self):
        self.ax.clear()
        self.ax.set_xlabel("X (m)")
        self.ax.set_ylabel("Y (m)")
        self.ax.set_zlabel("Z (m)")
        self.ax.set_title("Waypoints 3D View")
        self.ax.grid(True)
        self.ax.set_box_aspect([1, 1, 0.5])

        xs, ys, zs = [], [], []
        for row in range(self.position_table.rowCount()):
            try:
                x = float(self.position_table.item(row, 0).text())
                y = float(self.position_table.item(row, 1).text())
                z = float(self.position_table.item(row, 2).text())
                xs.append(x)
                ys.append(y)
                zs.append(z)
            except:
                pass

        if xs and ys and zs:
            self.ax.plot(xs, ys, zs, marker='o', linestyle='-', color='b')
            self.ax.scatter(xs, ys, zs, color='r')

        self.canvas.draw()

    def load_saved_commands(self):
        """Refresh dropdown with available saved commands."""
        self.combo_saved.clear()
        if not os.path.exists(self.saved_dir):
            os.makedirs(self.saved_dir)
        files = [f[:-5] for f in os.listdir(self.saved_dir) if f.endswith(".json")]
        self.combo_saved.addItems(files)

    def load_selected_command(self):
        """Load selected command set."""
        selected = self.combo_saved.currentText()
        if selected:
            filepath = os.path.join(self.saved_dir, f"{selected}.json")
            try:
                with open(filepath, "r") as f:
                    self.positions = json.load(f)
                self.update_table()
                self.update_3d_plot()
                QMessageBox.information(self, "Loaded", f"Loaded {selected}.json")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to load {selected}:\n{e}")

    def save_as_new_command(self):
        """Save current positions under a new name."""
        if not self.positions:
            QMessageBox.warning(self, "No Positions", "No positions to save.")
            return
        name, ok = QtWidgets.QInputDialog.getText(self, "Save Command", "Enter name for the saved command:")
        if ok and name:
            filepath = os.path.join(self.saved_dir, f"{name}.json")
            try:
                with open(filepath, "w") as f:
                    json.dump(self.positions, f)
                self.load_saved_commands()
                QMessageBox.information(self, "Saved", f"Saved as {name}.json")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to save:\n{e}")





# -----------------------------
# Main Application Window
# -----------------------------
class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle("Motor Control GUI")
        self.resize(1280, 720)  # 4K-friendly resolution
        self.process = None
        self.force_process = None  # New: process for force reader
        self.qol_process = None  # Add this line
        self.motor_ids = [8, 6, 4, 5, 7, 11, 1, 2]
        self.setup_ui()
        self.setup_timer()

    def setup_ui(self):
        # Add a menu bar with a new Force menu.

        # Create a tab widget with three pages.
        self.tabs = QtWidgets.QTabWidget(self)
        self.setCentralWidget(self.tabs)

        self.control_page = ControlPage(self)
        self.plot_page = PlotPage(self.motor_ids, self)
        self.manual_page = ManualCommandPage(self)
        self.control_page.qol_btn.clicked.connect(self.start_qol)

        self.tabs.addTab(self.control_page, "Control")
        self.tabs.addTab(self.plot_page, "Live Plot")
        self.tabs.addTab(self.manual_page, "Manual Command")

        # Connect Control Page butztons.
        self.control_page.start_btn.clicked.connect(self.start_main_code)
        self.control_page.stop_btn.clicked.connect(self.stop_main_code)
        # Connect Manual Command button.
        self.control_page.reset_btn.clicked.connect(self.reset_position)

        
    def setup_timer(self):
        # Timer to periodically update the live plot and speed display.
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_live_data)
        self.timer.start(100)  # Update every 100 ms.

    def start_force_reader(self):
        # Start the force reader script as a subprocess
        try:
            self.force_process = subprocess.Popen([sys.executable, "FORCE_READER2.py"])
            print("Force reader started.")
        except Exception as e:
            print("Error starting force reader:", e)

    def start_main_code(self):
        if self.process is None:
            try:
                self.process = subprocess.Popen([sys.executable, "main_code_kerol2.py"])
                self.start_force_reader()
                self.control_page.start_btn.setEnabled(False)
                self.control_page.stop_btn.setEnabled(True)
                self.control_page.qol_btn.setVisible(False)  # Hide QOL button
                self.control_page.status_label.setText("Status: Running (Main)")
                self.control_page.reset_btn.setVisible(True)
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to start main code:\n{e}")

    def start_qol(self):
        if self.qol_process is None:
            try:
                self.qol_process = subprocess.Popen([sys.executable, "QOL.py"])
                self.control_page.start_btn.setEnabled(False)
                self.control_page.stop_btn.setEnabled(True)
                self.control_page.qol_btn.setVisible(False)  # Hide QOL button
                self.control_page.status_label.setText("Status: Running (QOL)")
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Failed to start QOL script:\n{e}")

    def stop_main_code(self):
        # Stop main or QOL depending on which is running
        if self.process:
            self.process.terminate()
            self.process = None
        if self.qol_process:
            self.qol_process.terminate()
            self.qol_process = None
        if self.force_process:
            self.force_process.terminate()
            self.force_process = None

        self.control_page.start_btn.setEnabled(True)
        self.control_page.stop_btn.setEnabled(False)
        self.control_page.qol_btn.setVisible(True)  # Show QOL button again
        self.control_page.status_label.setText("Status: Stopped")
        self.control_page.reset_btn.setVisible(False)



    def update_live_data(self):
        self.plot_page.update_plots()
        try:
            if os.path.exists("pid_data.json"):
                with open("pid_data.json", "r") as f:
                    data = json.load(f)
                motor_speeds = data.get("motor_speeds", {})
                if motor_speeds:
                    speeds_str = "Motor Speeds: " + ", ".join(
                        [f"{m}: {motor_speeds.get(str(m), 'N/A')}" for m in self.motor_ids]
                    )
                    self.control_page.speed_label.setText(speeds_str)
        except Exception as e:
            print("Error reading pid_data.json:", e)


    def add_manual_command(self):
        values = {
            "x": self.manual_page.x_input.value(),
            "y": self.manual_page.y_input.value(),
            "z": self.manual_page.z_input.value()
        }
        self.manual_page.commands.append(values)
        QMessageBox.information(self, "Command Added", f"Added position: {values}")
        self.update_3d_plot()

        

    def clear_manual_commands(self):
        self.manual_page.commands = []
        QMessageBox.information(self, "Commands Cleared", "All commands have been cleared.")
        self.update_3d_plot()



    def submit_manual_commands(self):
        if not self.manual_page.commands:
            QMessageBox.warning(self, "No Commands", "No commands to submit.")
            return
        try:
            with open("desired_positions.json", "w") as f:  # << Save as a LIST
                json.dump([self.manual_page.commands], f)
            QMessageBox.information(self, "Commands Submitted", f"Submitted {len(self.manual_page.commands)} commands.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to write desired positions:\n{e}")
        self.update_3d_plot()



    
    def closeEvent(self, event):
        self.stop_main_code()
        if self.force_process:
            self.force_process.terminate()
        event.accept()


    def reset_position(self):
        try:
            # Create a reset command file
            with open("reset_command.json", "w") as f:
                json.dump({"reset": True}, f)
            QMessageBox.information(self, "Reset", "Sent reset command to (0, 0, 0.3)")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to send reset command:\n{e}")


# -----------------------------
# Main Application Entry Point
# -----------------------------
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

